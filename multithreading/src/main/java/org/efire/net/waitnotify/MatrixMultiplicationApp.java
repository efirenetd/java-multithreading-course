package org.efire.net.waitnotify;

import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringJoiner;

/**
 * This is an algebra exercise in which a pair of 10 x 10 array of numbers will be multiplied
 * then sum those products together.
 *
 * This program will read from a file generated by the MatricesGenerator (./out/matrices) which contains the 10x10 arrays
 * of random numbers to be calculated. Then will generate an output file (matrices_result.txt) for the result.
 *
 * To understand how the multiplication of matrices, check link below
 * Reference: https://byjus.com/maths/matrix-multiplication/
 *
 */
public class MatrixMultiplicationApp {
    public static final String INPUT_FILE = "./out/matrices";
    public static final String OUTPUT_FILE = "./out/matrices_results.txt";
    private static final int N = 10;

    public static void main(String[] args) throws IOException {
        var threadSafeQueue = new ThreadSafeQueue();
        var inputFile = new File(INPUT_FILE);
        var outputFile = new File(OUTPUT_FILE);

        var matricesReaderProducer = new MatricesReaderProducer(new FileReader(inputFile), threadSafeQueue);
        var matricesMultiplierConsumer = new MatricesMultiplierConsumer(new FileWriter(outputFile), threadSafeQueue);

        matricesReaderProducer.start();
        matricesMultiplierConsumer.start();
    }

    // Reads from the input file (./out/matrices) then adds a pair of matrices into the queue
    static class MatricesReaderProducer extends Thread {

        private Scanner scanner;
        private ThreadSafeQueue queue;

        public MatricesReaderProducer(FileReader fileReader, ThreadSafeQueue queue) {
            this.scanner = new Scanner(fileReader);
            this.queue = queue;
        }

        @Override
        public void run() {
            while (true) {
                var matrix1 = readMatrix();
                var matrix2 = readMatrix();
                if (matrix1 == null || matrix2 == null) {
                    queue.terminate();
                    System.out.println("No more matrices to read. Producer Thread is terminating.");
                    return;
                }

                //Create the MatricesPair object
                var matricesPair = new MatricesPair();
                matricesPair.matrix1 = matrix1;
                matricesPair.matrix2 = matrix2;

                queue.add(matricesPair);
            }
        }

        // Parse a single matrix from a file then converts into a two-dimensional array of floats
        public float[][] readMatrix() {
            var matrix = new float[N][N];

            for (int r = 0; r < N; r++) {
                if (!scanner.hasNext()) {
                    return null;
                }
                var line = scanner.nextLine().split(",");
                for (int c = 0; c < N; c++) {
                    matrix[r][c] = Float.valueOf(line[c]);
                }
            }
            scanner.nextLine();
            return matrix;
        }
    }


    static class MatricesMultiplierConsumer extends Thread {
        private ThreadSafeQueue queue;
        private FileWriter fileWriter;

        public MatricesMultiplierConsumer(FileWriter fileWriter, ThreadSafeQueue queue) {
            this.queue = queue;
            this.fileWriter = fileWriter;
        }

        @Override
        public void run() {
            while (true) {
                MatricesPair matricesPair = queue.remove();
                if (matricesPair == null)  {
                    System.out.println("No more matrices to read from the queue, consumer is terminating.");
                    break;
                }
                var result = multiplyMatrices(matricesPair.matrix1, matricesPair.matrix2);
                try {
                    saveMatrixToFile(fileWriter, result);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            try {
                fileWriter.flush();
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void saveMatrixToFile(FileWriter fileWriter, float[][] result) throws IOException {
            for (int i = 0; i < N; i++) {
                StringJoiner joiner = new StringJoiner(", ");
                for (int j = 0; j < N; j++) {
                    joiner.add(String.format("%.2f", result[i][j]));
                }
                fileWriter.write(joiner.toString());
                fileWriter.write('\n');
            }
            fileWriter.write('\n');
        }

        public float[][] multiplyMatrices(float[][] m1, float[][] m2) {
            var result = new float[N][N];
            for (int r = 0; r < N; r++) {
                for (int c = 0; c < N; c++) {
                    for (int k = 0; k < N; k++) {
                        result[r][c] += m1[r][k] * m2[k][c];
                    }
                }
            }
            return result;
        }

    }

    // No Backpressure
    static class ThreadSafeQueue {
        private Queue<MatricesPair> queue = new LinkedList<>(); //not thread safe LinkedList
        private boolean isEmpty = true;
        private boolean isTerminate = false;

        // Note: All 3 methods are synchronized which keep the operation to the Queue atomic.
        // Also, this allows us to use notify, wait
        public synchronized void add(MatricesPair matricesPair) {
            queue.add(matricesPair);
            isEmpty = false;
            notify();
        }

        public synchronized MatricesPair remove() {
            while (isEmpty && !isTerminate) {
                try {
                    wait();
                } catch (InterruptedException e) {
                }
            }
            if (queue.size() == 1) {
                isEmpty = true;
            }
            if (queue.size() == 0 && isTerminate) {
                return null;
            }
            System.out.println("queue size: "+queue.size());

            return queue.remove();
        }

        public synchronized void terminate() {
            isTerminate = true;
            notifyAll();
        }
    }

    static class MatricesPair {
        float[][] matrix1;
        float[][] matrix2;

    }
}
